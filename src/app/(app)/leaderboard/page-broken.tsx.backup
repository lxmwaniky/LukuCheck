
'use client';
import { useEffect, useState, useCallback } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { getLeaderboardData, getWeeklyLeaderboardData, getCurrentWeekStart } from '@/actions/outfitActions';
import type { LeaderboardEntry as ServerLeaderboardEntry } from '@/actions/outfitActions';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription, DialogClose } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { CalendarDays, Trophy, Star, Flame, Clock, Info, RefreshCw, Loader2, ChevronLeft, ChevronRight, MessageSquareQuote, Palette, Shirt, XCircle, Instagram, LinkIcon, AlertTriangle, Sparkles } from "lucide-react";
import { format, subDays, set, isBefore, isAfter, addDays } from 'date-fns';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/contexts/AuthContext';
import { LukuBadge } from '@/components/LukuBadge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { TIMING_CONFIG } from '@/config/timing';

type LeaderboardEntry = ServerLeaderboardEntry;

const ITEMS_PER_PAGE = 10;
const LEADERBOARD_REFRESH_INTERVAL = 5 * 60 * 1000; // 5 minutes

const formatTimeLeft = (ms: number): string => {
  if (ms <= 0) return "00:00:00";
  const totalSeconds = Math.floor(ms / 1000);
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor((totalSeconds % 3600) / 60);
  const seconds = totalSeconds % 60;
  return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
};

const toYYYYMMDD = (date: Date): string => {
  return date.toISOString().split('T')[0];
};

function LeaderboardPage() {
  const { user } = useAuth();
  const [allEntries, setAllEntries] = useState<LeaderboardEntry[]>([]);
  const [statusMessage, setStatusMessage] = useState<string | undefined>('Initializing...');
  const [isLoading, setIsLoading] = useState(true);
  const [isManuallyRefreshing, setIsManuallyRefreshing] = useState(false);
  const [selectedEntry, setSelectedEntry] = useState<LeaderboardEntry | null>(null);
  const [currentLeaderboardDate, setCurrentLeaderboardDate] = useState<string>('');
  const [timeLeftToRelease, setTimeLeftToRelease] = useState<number>(0);

  // Weekly leaderboard state
  const [weeklyEntries, setWeeklyEntries] = useState<any[]>([]);
  const [weeklyStatusMessage, setWeeklyStatusMessage] = useState<string | undefined>('');
  const [isWeeklyLoading, setIsWeeklyLoading] = useState(false);
  const [currentWeekStart, setCurrentWeekStart] = useState<string>('');
  const [activeTab, setActiveTab] = useState<'daily' | 'weekly'>('daily');

  const [currentPage, setCurrentPage] = useState(1);

  const determineLeaderboardStateAndFetch = useCallback(async (isManualRefresh = false) => {
    if (!isManualRefresh) setIsLoading(true); else setIsManuallyRefreshing(true);

    const now = new Date();
    let dateStringToFetch: string;
    let displayDate: Date;

    // If it's before 6:25 PM, we view yesterday's (or earlier) results.
    // After 6:25 PM, we anticipate today's results (which release at 6:30 PM).
    const endOfViewingPrevDayLeaderboard = set(now, { 
      hours: TIMING_CONFIG.LEADERBOARD_VIEWING_CUTOFF_HOUR, 
      minutes: TIMING_CONFIG.LEADERBOARD_VIEWING_CUTOFF_MINUTE, 
      seconds: 0, 
      milliseconds: 0 
    });

    if (isBefore(now, endOfViewingPrevDayLeaderboard)) {
      displayDate = subDays(now, 1);
    } else {
      displayDate = new Date(now);
    }
    dateStringToFetch = toYYYYMMDD(displayDate);
    setCurrentLeaderboardDate(dateStringToFetch);

    const releaseDateTimeForFetchedDate = set(displayDate, { 
      hours: TIMING_CONFIG.LEADERBOARD_RELEASE_HOUR, 
      minutes: TIMING_CONFIG.LEADERBOARD_RELEASE_MINUTE, 
      seconds: 0, 
      milliseconds: 0 
    });

    if (isAfter(now, releaseDateTimeForFetchedDate)) {
      try {
        const data = await getLeaderboardData({ leaderboardDate: dateStringToFetch });
        setAllEntries(data.entries);
        setCurrentPage(1);
        if (data.error) {
          setStatusMessage(data.error);
        } else if (data.entries.length === 0) {
          setStatusMessage(`No submissions found for ${formatDate(dateStringToFetch)}.`);
        } else {
          setStatusMessage(`Displaying top ${data.entries.length} entries for ${formatDate(dateStringToFetch)}.`);
        }
      } catch (error) {
        setStatusMessage('Could not load leaderboard data. Please try again later.');
      }
       setTimeLeftToRelease(0);
    } else {
      setTimeLeftToRelease(releaseDateTimeForFetchedDate.getTime() - now.getTime());
      setStatusMessage(`Leaderboard for ${formatDate(dateStringToFetch)} will be available at 6:30 PM.`);
      setAllEntries([]);
    }
    if (!isManualRefresh) setIsLoading(false); else setIsManuallyRefreshing(false);
  }, []);

  const fetchWeeklyLeaderboard = useCallback(async (weekStart?: string) => {
    setIsWeeklyLoading(true);
    try {
      const weekToFetch = weekStart || await getCurrentWeekStart();
      setCurrentWeekStart(weekToFetch);
      
      const data = await getWeeklyLeaderboardData({ weekStart: weekToFetch });
      setWeeklyEntries(data.entries);
      
      if (data.error) {
        setWeeklyStatusMessage(data.error);
      } else if (data.entries.length === 0) {
        setWeeklyStatusMessage(`No submissions found for the week starting ${weekToFetch}.`);
      } else {
        setWeeklyStatusMessage(data.message || `Displaying ${data.entries.length} participants for the week.`);
      }
    } catch (error) {
      setWeeklyStatusMessage('Could not load weekly leaderboard data. Please try again later.');
      setWeeklyEntries([]);
    }
    setIsWeeklyLoading(false);
  }, []);


  useEffect(() => {
    determineLeaderboardStateAndFetch();
     const intervalId = setInterval(() => {
        determineLeaderboardStateAndFetch();
    }, LEADERBOARD_REFRESH_INTERVAL);
    return () => clearInterval(intervalId);
  }, [determineLeaderboardStateAndFetch]);

  useEffect(() => {
    let timerInterval: NodeJS.Timeout | null = null;
    if (timeLeftToRelease > 0 && statusMessage?.includes('will be available')) {
        timerInterval = setInterval(() => {
            setTimeLeftToRelease(prevTime => {
                if (prevTime <= 1000) {
                    if(timerInterval) clearInterval(timerInterval);
                    determineLeaderboardStateAndFetch(); // Re-fetch when timer hits zero
                    return 0;
                }
                return prevTime - 1000;
            });
        }, 1000);
    }
    return () => {
        if (timerInterval) clearInterval(timerInterval);
    };
  }, [timeLeftToRelease, statusMessage, determineLeaderboardStateAndFetch]);

  // Fetch weekly data when weekly tab is activated
  useEffect(() => {
    if (activeTab === 'weekly' && weeklyEntries.length === 0) {
      fetchWeeklyLeaderboard();
    }
  }, [activeTab, fetchWeeklyLeaderboard, weeklyEntries.length]);


  const formatDate = (dateString: string) => {
    if (!dateString) return "N/A";
    const date = new Date(dateString + 'T00:00:00Z'); // Ensure UTC interpretation for consistency
    return format(date, "MMMM d, yyyy");
  };

  const getWeekDateRange = (weekStart: string) => {
    const startDate = new Date(weekStart + 'T00:00:00Z');
    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + 6);
    return {
      start: format(startDate, "MMM d"),
      end: format(endDate, "MMM d, yyyy")
    };
  };

  const navigateWeek = (direction: 'prev' | 'next') => {
    const currentDate = new Date(currentWeekStart + 'T00:00:00Z');
    const newDate = new Date(currentDate);
    newDate.setDate(newDate.getDate() + (direction === 'next' ? 7 : -7));
    const newWeekStart = newDate.toISOString().split('T')[0];
    fetchWeeklyLeaderboard(newWeekStart);
  };

  const isLeaderboardReleased = !statusMessage?.includes('will be available at 6:30 PM');

  const totalPages = Math.ceil(allEntries.length / ITEMS_PER_PAGE);
  const displayedEntries = allEntries.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  const handlePrevPage = () => {
    setCurrentPage((prev) => Math.max(1, prev - 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prev) => Math.min(totalPages, prev + 1));
  };

  const handleManualRefresh = () => {
    determineLeaderboardStateAndFetch(true);
  }

  const getRank = (index: number) => {
    return (currentPage - 1) * ITEMS_PER_PAGE + index + 1;
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      <div className="max-w-4xl mx-auto px-4 py-6">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">Leaderboard</h1>
          <p className="text-gray-400">Compete with the style community</p>
        </div>

        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'daily' | 'weekly')} className="w-full">
          {/* Tab Navigation */}
          <div className="flex justify-center mb-8">
            <TabsList className="grid grid-cols-2 bg-gray-800 border border-gray-700 rounded-xl p-1">
              <TabsTrigger 
                value="daily" 
                className="flex items-center gap-2 px-6 py-3 rounded-lg transition-all data-[state=active]:bg-gray-700 data-[state=active]:text-white text-gray-400"
              >
                <CalendarDays className="h-4 w-4" />
                Daily
              </TabsTrigger>
              <TabsTrigger 
                value="weekly" 
                className="flex items-center gap-2 px-6 py-3 rounded-lg transition-all data-[state=active]:bg-gray-700 data-[state=active]:text-white text-gray-400"
              >
                <Trophy className="h-4 w-4" />
                Weekly
              </TabsTrigger>
            </TabsList>
          </div>

        <TabsContent value="daily" className="space-y-6">
          {/* Status Message */}
          {statusMessage && (
            <Alert className="bg-gray-800 border-gray-700 text-white">
              <Info className="h-4 w-4" />
              <AlertDescription>{statusMessage}</AlertDescription>
            </Alert>
          )}

          {/* Daily Leaderboard */}
          {isLoading ? (
            <div className="flex items-center justify-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
              <span className="ml-3 text-gray-400">Loading leaderboard...</span>
            </div>
          ) : allEntries.length === 0 ? (
            <div className="text-center py-12">
              <Trophy className="h-16 w-16 text-gray-600 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-400 mb-2">No submissions yet</h3>
              <p className="text-gray-500">Be the first to submit an outfit today!</p>
            </div>
          ) : (
            <>
              {/* Top 3 Podium */}
              {allEntries.length >= 3 && (
                <div className="flex justify-center items-end gap-4 mb-8">
                  {/* Second Place */}
                  {allEntries[1] && (
                    <div className="text-center">
                      <div className="relative mb-3">
                        <div className="w-16 h-16 rounded-full border-4 border-gray-600 overflow-hidden cursor-pointer hover:border-gray-500 transition-colors"
                             onClick={() => setSelectedEntry(allEntries[1])}>
                          <Avatar className="w-full h-full">
                            <AvatarImage src={allEntries[1].userPhotoURL || '/default-avatar.png'} />
                            <AvatarFallback className="bg-gray-700 text-white text-lg font-bold">
                              {allEntries[1].username?.[0]?.toUpperCase() || '?'}
                            </AvatarFallback>
                          </Avatar>
                        </div>
                        <div className="absolute -bottom-1 -right-1 w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center border-2 border-gray-900">
                          <span className="text-white font-bold text-sm">2</span>
                        </div>
                      </div>
                      <h3 className="font-medium text-white text-sm mb-1 truncate max-w-20">
                        {allEntries[1].username}
                      </h3>
                      <p className="text-gray-400 text-sm">{allEntries[1].rating?.toFixed(1) || '--'} EXP</p>
                    </div>
                  )}

                  {/* First Place */}
                  {allEntries[0] && (
                    <div className="text-center">
                      <div className="relative mb-3">
                        <div className="w-20 h-20 rounded-full border-4 border-yellow-500 overflow-hidden cursor-pointer hover:border-yellow-400 transition-colors"
                             onClick={() => setSelectedEntry(allEntries[0])}>
                          <Avatar className="w-full h-full">
                            <AvatarImage src={allEntries[0].photoURL || '/default-avatar.png'} />
                            <AvatarFallback className="bg-gray-700 text-white text-xl font-bold">
                              {allEntries[0].displayName?.[0]?.toUpperCase() || '?'}
                            </AvatarFallback>
                          </Avatar>
                        </div>
                        <div className="absolute -top-2 -right-1">
                          <div className="w-6 h-8 text-yellow-500">
                            <svg viewBox="0 0 24 24" fill="currentColor">
                              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                            </svg>
                          </div>
                        </div>
                        <div className="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center border-2 border-gray-900">
                          <span className="text-gray-900 font-bold text-sm">1</span>
                        </div>
                      </div>
                      <h3 className="font-medium text-white mb-1 truncate max-w-24">
                        {allEntries[0].displayName}
                      </h3>
                      <p className="text-yellow-400 text-sm font-medium">{allEntries[0].rating?.toFixed(1) || '--'} EXP</p>
                    </div>
                  )}

                  {/* Third Place */}
                  {allEntries[2] && (
                    <div className="text-center">
                      <div className="relative mb-3">
                        <div className="w-16 h-16 rounded-full border-4 border-gray-600 overflow-hidden cursor-pointer hover:border-gray-500 transition-colors"
                             onClick={() => setSelectedEntry(allEntries[2])}>
                          <Avatar className="w-full h-full">
                            <AvatarImage src={allEntries[2].photoURL || '/default-avatar.png'} />
                            <AvatarFallback className="bg-gray-700 text-white text-lg font-bold">
                              {allEntries[2].displayName?.[0]?.toUpperCase() || '?'}
                            </AvatarFallback>
                          </Avatar>
                        </div>
                        <div className="absolute -bottom-1 -right-1 w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center border-2 border-gray-900">
                          <span className="text-white font-bold text-sm">3</span>
                        </div>
                      </div>
                      <h3 className="font-medium text-white text-sm mb-1 truncate max-w-20">
                        {allEntries[2].displayName}
                      </h3>
                      <p className="text-gray-400 text-sm">{allEntries[2].rating?.toFixed(1) || '--'} EXP</p>
                    </div>
                  )}
                </div>
              )}

              {/* Rest of Rankings */}
              <div className="space-y-2">
                {allEntries.slice(3).map((entry, index) => (
                  <div 
                    key={entry.id} 
                    className="bg-gray-800 rounded-xl p-4 border border-gray-700 hover:bg-gray-750 transition-colors cursor-pointer"
                    onClick={() => setSelectedEntry(entry)}
                  >
                    <div className="flex items-center justify-between">
                      {/* Rank and User Info */}
                      <div className="flex items-center gap-4">
                        <div className="w-8 h-8 bg-gray-700 rounded-full flex items-center justify-center text-gray-300 text-sm font-medium">
                          {String(index + 4).padStart(2, '0')}
                        </div>
                        <div className="flex items-center gap-3">
                          <Avatar className="w-10 h-10">
                            <AvatarImage src={entry.photoURL || '/default-avatar.png'} />
                            <AvatarFallback className="bg-gray-700 text-white font-bold">
                              {entry.displayName?.[0]?.toUpperCase() || '?'}
                            </AvatarFallback>
                          </Avatar>
                          <span className="text-white font-medium">{entry.displayName}</span>
                        </div>
                      </div>
                      
                      {/* Score */}
                      <div className="text-gray-300 font-medium">
                        {entry.rating?.toFixed(1) || '--'} EXP
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </>
          )}
        </TabsContent>

        <TabsContent value="weekly" className="space-y-6">
          {/* Weekly Navigation */}
          <div className="flex items-center justify-center gap-4 mb-6">
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => navigateWeek('prev')}
              disabled={isWeeklyLoading}
              className="bg-gray-800 border-gray-700 text-gray-300 hover:bg-gray-700 hover:text-white"
            >
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <div className="text-center">
              <div className="text-white font-medium">
                {(() => {
                  const range = getWeekDateRange(currentWeekStart);
                  return `${range.start} - ${range.end}`;
                })()}
              </div>
              <div className="text-gray-400 text-sm">Weekly Champions</div>
            </div>
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => navigateWeek('next')}
              disabled={isWeeklyLoading || isFutureWeek}
              className="bg-gray-800 border-gray-700 text-gray-300 hover:bg-gray-700 hover:text-white"
            >
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>

          {/* Weekly Leaderboard */}
          {isWeeklyLoading ? (
            <div className="flex items-center justify-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
              <span className="ml-3 text-gray-400">Loading weekly data...</span>
            </div>
          ) : weeklyEntries.length === 0 ? (
            <div className="text-center py-12">
              <Trophy className="h-16 w-16 text-gray-600 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-400 mb-2">No data for this week</h3>
              <p className="text-gray-500">No submissions were made during this period.</p>
            </div>
          ) : (
            <div className="space-y-2">
              {weeklyEntries.map((entry, index) => (
                <div 
                  key={entry.id} 
                  className="bg-gray-800 rounded-xl p-4 border border-gray-700 hover:bg-gray-750 transition-colors cursor-pointer"
                  onClick={() => setSelectedEntry(entry)}
                >
                  <div className="flex items-center justify-between">
                    {/* Rank and User Info */}
                    <div className="flex items-center gap-4">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                        index === 0 ? 'bg-yellow-500 text-gray-900' : 
                        index === 1 ? 'bg-gray-600 text-white' : 
                        index === 2 ? 'bg-gray-600 text-white' : 
                        'bg-gray-700 text-gray-300'
                      }`}>
                        {String(index + 1).padStart(2, '0')}
                      </div>
                      <div className="flex items-center gap-3">
                        <Avatar className="w-10 h-10">
                          <AvatarImage src={entry.photoURL || '/default-avatar.png'} />
                          <AvatarFallback className="bg-gray-700 text-white font-bold">
                            {entry.displayName?.[0]?.toUpperCase() || '?'}
                          </AvatarFallback>
                        </Avatar>
                        <span className="text-white font-medium">{entry.displayName}</span>
                      </div>
                    </div>
                    
                    {/* Weekly Stats */}
                    <div className="text-right">
                      <div className="text-white font-medium">{entry.weeklyPoints?.toFixed(0) || '0'} EXP</div>
                      <div className="text-gray-400 text-sm">{entry.submissionCount || 0} submissions</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </TabsContent>
        </Tabs>

        {/* User Profile Modal */}
        <Dialog open={!!selectedEntry} onOpenChange={(open) => !open && setSelectedEntry(null)}>
          <DialogContent className="max-w-md bg-gray-800 border-gray-700 text-white">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-3">
                {selectedEntry && (
                  <>
                    <Avatar className="w-12 h-12">
                      <AvatarImage src={selectedEntry.photoURL || '/default-avatar.png'} />
                      <AvatarFallback className="bg-gray-700 text-white font-bold text-lg">
                        {selectedEntry.displayName?.[0]?.toUpperCase() || '?'}
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <div className="text-white font-bold text-lg">{selectedEntry.displayName}</div>
                      {activeTab === 'daily' ? (
                        <div className="text-yellow-400 text-sm">Rating: {selectedEntry.rating?.toFixed(1) || '--'}/10</div>
                      ) : (
                        <div className="text-yellow-400 text-sm">Weekly Points: {selectedEntry.weeklyPoints?.toFixed(0) || '0'}</div>
                      )}
                    </div>
                  </>
                )}
              </DialogTitle>
            </DialogHeader>
            
            {selectedEntry && (
              <div className="space-y-4">
                {/* Stats Grid */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gray-700 rounded-lg p-3">
                    <div className="text-2xl font-bold text-white">
                      {activeTab === 'daily' ? (selectedEntry.rating?.toFixed(1) || '--') : (selectedEntry.submissionCount || '0')}
                    </div>
                    <div className="text-gray-400 text-sm">
                      {activeTab === 'daily' ? 'Style Score' : 'Submissions'}
                    </div>
                  </div>
                  <div className="bg-gray-700 rounded-lg p-3">
                    <div className="text-2xl font-bold text-white">
                      {activeTab === 'daily' ? '1' : (selectedEntry.averageRating?.toFixed(1) || '--')}
                    </div>
                    <div className="text-gray-400 text-sm">
                      {activeTab === 'daily' ? 'Submissions' : 'Avg Rating'}
                    </div>
                  </div>
                </div>

                {/* Outfit Preview */}
                {selectedEntry.outfitImageUrl && (
                  <div className="bg-gray-700 rounded-lg p-4">
                    <h4 className="text-white font-medium mb-3">Featured Outfit</h4>
                    <div className="aspect-square rounded-lg overflow-hidden bg-gray-600">
                      <Image
                        src={selectedEntry.outfitImageUrl}
                        alt="User's outfit"
                        width={200}
                        height={200}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  </div>
                )}

                {/* Social Links */}
                {selectedEntry.instagramHandle && (
                  <div className="bg-gray-700 rounded-lg p-3">
                    <div className="flex items-center gap-2">
                      <Instagram className="h-4 w-4 text-pink-500" />
                      <span className="text-white">@{selectedEntry.instagramHandle}</span>
                    </div>
                  </div>
                )}
              </div>
            )}
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
            <Card className="relative bg-white/80 dark:bg-gray-800/80 backdrop-blur-xl border-0 shadow-2xl rounded-2xl overflow-hidden">
              <CardHeader className="text-center py-8 bg-gradient-to-r from-blue-50/50 to-purple-50/50 dark:from-blue-900/20 dark:to-purple-900/20">
                <div className="flex items-center justify-center mb-4">
                  <div className="p-4 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 text-white animate-pulse shadow-lg">
                    <CalendarDays className="h-8 w-8" />
                  </div>
                </div>
                <CardTitle className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent">
                  Daily Style Champions
                </CardTitle>
                {currentLeaderboardDate && (
                  <CardDescription className="text-lg text-gray-600 dark:text-gray-400 mt-2">
                    <div className="flex items-center justify-center gap-2">
                      <div className="h-2 w-2 bg-green-500 rounded-full animate-pulse"></div>
                      {formatDate(currentLeaderboardDate)}
                    </div>
                  </CardDescription>
                )}
                <div className="mt-3 px-4 py-2 bg-gray-100/60 dark:bg-gray-700/60 rounded-full inline-block">
                  <CardDescription className="text-sm font-medium text-gray-700 dark:text-gray-300">
                    Submissions: 6 AM - 6 PM • Results: 6:30 PM daily
                  </CardDescription>
                </div>
                <Button 
                  onClick={handleManualRefresh} 
                  variant="outline" 
                  size="sm" 
                  className="mt-6 bg-white/50 dark:bg-gray-700/50 backdrop-blur border-blue-200/50 hover:bg-blue-50/50 dark:hover:bg-blue-900/50 transition-all shadow-md hover:shadow-lg" 
                  disabled={isManuallyRefreshing || isLoading}
                >
                  {isManuallyRefreshing || isLoading ? (
                    <Loader2 className="h-4 w-4 animate-spin mr-2"/>
                  ) : (
                    <RefreshCw className="h-4 w-4 mr-2"/>
                  )}
                  Refresh Rankings
                </Button>
              </CardHeader>
        <CardContent className="p-8">
          {isLoading && !isManuallyRefreshing ? (
            <div className="flex flex-col items-center justify-center py-16">
              <div className="relative">
                <div className="absolute inset-0 bg-gradient-to-r from-blue-400 to-purple-600 rounded-full blur-md opacity-30"></div>
                <Loader2 className="relative h-12 w-12 animate-spin text-blue-600 dark:text-blue-400" />
              </div>
              <p className="text-xl text-gray-600 dark:text-gray-400 mt-6 font-medium">Loading the latest rankings...</p>
              <p className="text-sm text-gray-500 dark:text-gray-500 mt-2">This might take a moment</p>
            </div>
          ) : !isLeaderboardReleased && timeLeftToRelease > 0 ? (
             <Alert className="border-0 bg-gradient-to-r from-blue-50/80 to-purple-50/80 dark:from-blue-900/20 dark:to-purple-900/20 backdrop-blur rounded-xl shadow-lg">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-blue-500/20">
                  <Clock className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                </div>
                <div className="flex-1">
                  <AlertTitle className="font-semibold text-blue-900 dark:text-blue-100">Leaderboard Coming Soon</AlertTitle>
                  <AlertDescription className="text-blue-700 dark:text-blue-300 mt-1">
                    Rankings for {formatDate(currentLeaderboardDate)} will be revealed at 6:30 PM
                    <div className="font-semibold text-blue-800 dark:text-blue-200 mt-1">
                      ⏱️ Time remaining: {formatTimeLeft(timeLeftToRelease)}
                    </div>
                  </AlertDescription>
                </div>
              </div>
            </Alert>
          ) : statusMessage && displayedEntries.length === 0 && !statusMessage.toLowerCase().includes("error") && isLeaderboardReleased ? (
             <Alert className="border-0 bg-gradient-to-r from-yellow-50/80 to-orange-50/80 dark:from-yellow-900/20 dark:to-orange-900/20 backdrop-blur rounded-xl shadow-lg">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-yellow-500/20">
                  <Info className="h-5 w-5 text-yellow-600 dark:text-yellow-400" />
                </div>
                <div className="flex-1">
                  <AlertTitle className="font-semibold text-yellow-900 dark:text-yellow-100">Leaderboard Status</AlertTitle>
                  <AlertDescription className="text-yellow-700 dark:text-yellow-300">{statusMessage}</AlertDescription>
                </div>
              </div>
            </Alert>
          ) : statusMessage && statusMessage.toLowerCase().includes("error") ? (
             <Alert className="border-0 bg-gradient-to-r from-red-50/80 to-pink-50/80 dark:from-red-900/20 dark:to-pink-900/20 backdrop-blur rounded-xl shadow-lg">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-red-500/20">
                  <AlertTriangle className="h-5 w-5 text-red-600 dark:text-red-400" />
                </div>
                <div className="flex-1">
                  <AlertTitle className="font-semibold text-red-900 dark:text-red-100">Error Loading Rankings</AlertTitle>
                  <AlertDescription className="text-red-700 dark:text-red-300">{statusMessage}</AlertDescription>
                </div>
              </div>
            </Alert>
          ): displayedEntries.length === 0 && isLeaderboardReleased ? (
            <Alert className="border-0 bg-gradient-to-r from-gray-50/80 to-slate-50/80 dark:from-gray-900/20 dark:to-slate-900/20 backdrop-blur rounded-xl shadow-lg">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gray-500/20">
                  <Info className="h-5 w-5 text-gray-600 dark:text-gray-400" />
                </div>
                <div className="flex-1">
                  <AlertTitle className="font-semibold text-gray-900 dark:text-gray-100">No Submissions Yet</AlertTitle>
                  <AlertDescription className="text-gray-700 dark:text-gray-300">
                    No outfits have been submitted for {formatDate(currentLeaderboardDate)} yet. Be the first to showcase your style!
                  </AlertDescription>
                </div>
              </div>
            </Alert>
          ) : (
            <div className="space-y-6">
            {statusMessage && !statusMessage.toLowerCase().includes("error") && (
                <Alert className="mb-6 border-0 bg-gradient-to-r from-green-50/80 to-emerald-50/80 dark:from-green-900/20 dark:to-emerald-900/20 backdrop-blur rounded-xl shadow-lg">
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-full bg-green-500/20">
                      <Info className="h-5 w-5 text-green-600 dark:text-green-400" />
                    </div>
                    <div className="flex-1">
                      <AlertTitle className="font-semibold text-green-900 dark:text-green-100">Rankings Updated</AlertTitle>
                      <AlertDescription className="text-green-700 dark:text-green-300">{statusMessage}</AlertDescription>
                    </div>
                  </div>
                </Alert>
            )}

            {/* Modern Card-based Leaderboard */}
            <div className="space-y-4">
              {displayedEntries.map((entry, index) => {
                const rank = getRank(index);
                const isCurrentUser = user?.uid === entry.userId;
                const isTopThree = rank <= 3;
                
                return (
                  <div key={entry.id} className="relative group">
                    {isTopThree && (
                      <div className="absolute inset-0 bg-gradient-to-r from-yellow-400/20 via-yellow-500/20 to-orange-500/20 rounded-2xl blur-sm group-hover:blur-md transition-all"></div>
                    )}
                    <Card className={cn(
                      "relative bg-white/80 dark:bg-gray-800/80 backdrop-blur-xl border-0 shadow-lg hover:shadow-xl transition-all duration-300 rounded-2xl overflow-hidden",
                      isTopThree && "ring-2 ring-yellow-400/50 shadow-yellow-100/50 dark:shadow-yellow-900/20",
                      isCurrentUser && "ring-2 ring-blue-500/60 bg-blue-50/30 dark:bg-blue-900/20"
                    )}>
                      <CardContent className="p-6">
                        <div className="flex items-center gap-6">
                          {/* Rank Badge */}
                          <div className="flex-shrink-0">
                            {rank <= 3 ? (
                              <div className={cn(
                                "relative p-4 rounded-full shadow-lg",
                                rank === 1 && "bg-gradient-to-br from-yellow-400 to-yellow-600",
                                rank === 2 && "bg-gradient-to-br from-gray-400 to-gray-600", 
                                rank === 3 && "bg-gradient-to-br from-amber-600 to-orange-600"
                              )}>
                                <Trophy className="h-6 w-6 text-white" />
                                <div className="absolute -top-1 -right-1 bg-white dark:bg-gray-800 rounded-full p-1">
                                  <span className="text-xs font-bold text-gray-900 dark:text-white">{rank}</span>
                                </div>
                              </div>
                            ) : (
                              <div className="flex items-center justify-center w-14 h-14 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 shadow-lg">
                                <span className="font-bold text-xl text-gray-700 dark:text-gray-300">#{rank}</span>
                              </div>
                            )}
                          </div>

                          {/* User Info */}
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-3 mb-2">
                              <Avatar className="h-12 w-12 border-2 border-white dark:border-gray-700 shadow-lg">
                                <AvatarImage src={entry.userPhotoURL || undefined} alt={entry.username || 'User'} />
                                <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-600 text-white font-semibold">
                                  {(entry.username || 'U').charAt(0).toUpperCase()}
                                </AvatarFallback>
                              </Avatar>
                              <div className="flex-1 min-w-0">
                                <div className="flex items-center gap-2 mb-1">
                                  <h3 className="font-semibold text-lg text-gray-900 dark:text-white truncate">
                                    {entry.username || 'Anonymous User'}
                                  </h3>
                                  <LukuBadge lukuPoints={entry.lukuPoints} />
                                  {entry.currentStreak && entry.currentStreak > 0 && (
                                    <div className="flex items-center text-orange-600 bg-orange-100 dark:bg-orange-900/30 px-2 py-1 rounded-full">
                                      <Flame className="h-3 w-3 mr-1" />
                                      <span className="text-xs font-semibold">{entry.currentStreak}</span>
                                    </div>
                                  )}
                                </div>
                                <div className="flex items-center gap-2">
                                  {entry.tiktokUrl && (
                                    <Link href={entry.tiktokUrl} target="_blank" rel="noopener noreferrer" onClick={(e) => e.stopPropagation()} className="text-gray-400 hover:text-blue-500 transition-colors">
                                      <LinkIcon className="h-4 w-4" />
                                    </Link>
                                  )}
                                  {entry.instagramUrl && (
                                    <Link href={entry.instagramUrl} target="_blank" rel="noopener noreferrer" onClick={(e) => e.stopPropagation()} className="text-gray-400 hover:text-pink-500 transition-colors">
                                      <Instagram className="h-4 w-4" />
                                    </Link>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Outfit Preview */}
                          <div className="flex-shrink-0">
                            <DialogTrigger asChild>
                              <button 
                                onClick={() => setSelectedEntry(entry)}
                                className="group relative overflow-hidden rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                              >
                                <Image
                                  src={entry.outfitImageURL}
                                  alt={`Outfit by ${entry.username}`}
                                  width={80}
                                  height={80}
                                  className="object-cover aspect-square group-hover:scale-110 transition-transform duration-300"
                                />
                                <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors"></div>
                              </button>
                            </DialogTrigger>
                          </div>

                          {/* Score */}
                          <div className="flex-shrink-0 text-right">
                            <div className="flex items-center gap-1 mb-1">
                              <span className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                                {entry.rating?.toFixed(1) || '--'}
                              </span>
                              <Star className="h-6 w-6 text-yellow-500 fill-yellow-500" />
                            </div>
                            <p className="text-sm text-gray-500 dark:text-gray-400">Style Score</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                );
              })}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex items-center justify-center gap-4 mt-8 pt-6">
                <Button
                  variant="outline"
                  onClick={handlePrevPage}
                  disabled={currentPage === 1}
                  className="bg-white/70 dark:bg-gray-800/70 backdrop-blur border-gray-200/50 hover:bg-gray-50/80 dark:hover:bg-gray-700/80 transition-all shadow-lg"
                >
                  <ChevronLeft className="h-4 w-4 mr-1" />
                  Previous
                </Button>
                <div className="flex items-center gap-2">
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    const pageNum = currentPage <= 3 ? i + 1 : currentPage - 2 + i;
                    if (pageNum > totalPages) return null;
                    return (
                      <Button
                        key={pageNum}
                        variant={currentPage === pageNum ? "default" : "outline"}
                        size="sm"
                        onClick={() => setCurrentPage(pageNum)}
                        className={cn(
                          "w-10 h-10 rounded-full transition-all",
                          currentPage === pageNum 
                            ? "bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg" 
                            : "bg-white/70 dark:bg-gray-800/70 backdrop-blur border-gray-200/50 hover:bg-gray-50/80"
                        )}
                      >
                        {pageNum}
                      </Button>
                    );
                  })}
                </div>
                <Button
                  variant="outline"
                  onClick={handleNextPage}
                  disabled={currentPage === totalPages}
                  className="bg-white/70 dark:bg-gray-800/70 backdrop-blur border-gray-200/50 hover:bg-gray-50/80 dark:hover:bg-gray-700/80 transition-all shadow-lg"
                >
                  Next
                  <ChevronRight className="h-4 w-4 ml-1" />
                </Button>
              </div>
            )}
            </div>
          )}
        </CardContent>
      </Card>
          </div>
        </TabsContent>

        <TabsContent value="weekly" className="space-y-6">
          {/* Weekly Leaderboard Header Card */}
          <div className="relative">
            <div className="absolute inset-0 bg-gradient-to-r from-purple-500/10 to-pink-600/10 rounded-2xl blur-xl"></div>
            <Card className="relative bg-white/80 dark:bg-gray-800/80 backdrop-blur-xl border-0 shadow-2xl rounded-2xl overflow-hidden">
              <CardHeader className="text-center py-8 bg-gradient-to-r from-purple-50/50 to-pink-50/50 dark:from-purple-900/20 dark:to-pink-900/20">
                <div className="flex items-center justify-center mb-4">
                  <div className="p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-600 text-white animate-pulse shadow-lg">
                    <Trophy className="h-8 w-8" />
                  </div>
                </div>
                <CardTitle className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 dark:from-purple-400 dark:to-pink-400 bg-clip-text text-transparent">
                  Weekly Champions
                </CardTitle>
                {currentWeekStart && (
                  <div className="flex items-center justify-center gap-4 mt-4">
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={() => navigateWeek('prev')}
                      disabled={isWeeklyLoading}
                      className="hover:bg-purple-100/50 dark:hover:bg-purple-900/50"
                    >
                      <ChevronLeft className="h-4 w-4" />
                    </Button>
                    <div className="flex items-center gap-2 px-4 py-2 bg-white/50 dark:bg-gray-700/50 rounded-full backdrop-blur">
                      <CalendarDays className="h-5 w-5 text-purple-600 dark:text-purple-400" />
                      <span className="text-lg font-semibold text-purple-900 dark:text-purple-100">
                        {(() => {
                          const range = getWeekDateRange(currentWeekStart);
                          return `${range.start} - ${range.end}`;
                        })()}
                      </span>
                    </div>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={() => navigateWeek('next')}
                      disabled={isWeeklyLoading}
                      className="hover:bg-purple-100/50 dark:hover:bg-purple-900/50"
                    >
                      <ChevronRight className="h-4 w-4" />
                    </Button>
                  </div>
                )}
                <div className="mt-3 px-4 py-2 bg-purple-100/60 dark:bg-purple-700/60 rounded-full inline-block">
                  <CardDescription className="text-sm font-medium text-purple-700 dark:text-purple-300">
                    Weekly aggregated performance • Monday to Sunday
                  </CardDescription>
                </div>
                <Button 
                  onClick={() => fetchWeeklyLeaderboard()} 
                  variant="outline" 
                  size="sm" 
                  className="mt-6 bg-white/50 dark:bg-gray-700/50 backdrop-blur border-purple-200/50 hover:bg-purple-50/50 dark:hover:bg-purple-900/50 transition-all shadow-md hover:shadow-lg" 
                  disabled={isWeeklyLoading}
                >
                  {isWeeklyLoading ? (
                    <Loader2 className="h-4 w-4 animate-spin mr-2"/>
                  ) : (
                    <RefreshCw className="h-4 w-4 mr-2"/>
                  )}
                  Refresh Weekly
                </Button>
              </CardHeader>
            <CardContent className="p-8">
              {isWeeklyLoading ? (
                <div className="flex flex-col items-center justify-center py-16">
                  <div className="relative">
                    <div className="absolute inset-0 bg-gradient-to-r from-purple-400 to-pink-600 rounded-full blur-md opacity-30"></div>
                    <Loader2 className="relative h-12 w-12 animate-spin text-purple-600 dark:text-purple-400" />
                  </div>
                  <p className="text-xl text-gray-600 dark:text-gray-400 mt-6 font-medium">Loading weekly champions...</p>
                  <p className="text-sm text-gray-500 dark:text-gray-500 mt-2">Calculating the best performers</p>
                </div>
              ) : weeklyStatusMessage && weeklyEntries.length === 0 && !weeklyStatusMessage.toLowerCase().includes("error") ? (
                 <Alert className="border-0 bg-gradient-to-r from-yellow-50/80 to-orange-50/80 dark:from-yellow-900/20 dark:to-orange-900/20 backdrop-blur rounded-xl shadow-lg">
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-full bg-yellow-500/20">
                      <Info className="h-5 w-5 text-yellow-600 dark:text-yellow-400" />
                    </div>
                    <div className="flex-1">
                      <AlertTitle className="font-semibold text-yellow-900 dark:text-yellow-100">Weekly Status</AlertTitle>
                      <AlertDescription className="text-yellow-700 dark:text-yellow-300">{weeklyStatusMessage}</AlertDescription>
                    </div>
                  </div>
                </Alert>
              ) : weeklyStatusMessage && weeklyStatusMessage.toLowerCase().includes("error") ? (
                 <Alert className="border-0 bg-gradient-to-r from-red-50/80 to-pink-50/80 dark:from-red-900/20 dark:to-pink-900/20 backdrop-blur rounded-xl shadow-lg">
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-full bg-red-500/20">
                      <AlertTriangle className="h-5 w-5 text-red-600 dark:text-red-400" />
                    </div>
                    <div className="flex-1">
                      <AlertTitle className="font-semibold text-red-900 dark:text-red-100">Error Loading Weekly Data</AlertTitle>
                      <AlertDescription className="text-red-700 dark:text-red-300">{weeklyStatusMessage}</AlertDescription>
                    </div>
                  </div>
                </Alert>
              ) : weeklyEntries.length > 0 ? (
                <div className="space-y-4">
                  {weeklyEntries.map((entry, index) => {
                    const isTopThree = index < 3;
                    return (
                      <div key={entry.userId} className="relative group">
                        {isTopThree && (
                          <div className="absolute inset-0 bg-gradient-to-r from-purple-400/20 via-pink-500/20 to-purple-600/20 rounded-2xl blur-sm group-hover:blur-md transition-all"></div>
                        )}
                        <Card className={cn(
                          "relative bg-white/80 dark:bg-gray-800/80 backdrop-blur-xl border-0 shadow-lg hover:shadow-xl transition-all duration-300 rounded-2xl overflow-hidden",
                          isTopThree && "ring-2 ring-purple-400/50 shadow-purple-100/50 dark:shadow-purple-900/20"
                        )}>
                          <CardContent className="p-6">
                            <div className="flex items-center gap-6">
                              {/* Rank Badge */}
                              <div className="flex-shrink-0">
                                <div className={cn(
                                  "relative p-4 rounded-full shadow-lg",
                                  index === 0 && "bg-gradient-to-br from-yellow-400 to-yellow-600",
                                  index === 1 && "bg-gradient-to-br from-gray-400 to-gray-600", 
                                  index === 2 && "bg-gradient-to-br from-amber-600 to-orange-600",
                                  index > 2 && "bg-gradient-to-br from-purple-400 to-purple-600"
                                )}>
                                  <Trophy className="h-6 w-6 text-white" />
                                  <div className="absolute -top-1 -right-1 bg-white dark:bg-gray-800 rounded-full p-1">
                                    <span className="text-xs font-bold text-gray-900 dark:text-white">{index + 1}</span>
                                  </div>
                                </div>
                              </div>

                              {/* User Info */}
                              <div className="flex-1 min-w-0">
                                <div className="flex items-center gap-3 mb-2">
                                  <Avatar className="h-12 w-12 border-2 border-white dark:border-gray-700 shadow-lg">
                                    <AvatarImage src={entry.photoURL || undefined} alt={entry.username} />
                                    <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-600 text-white font-semibold">
                                      {entry.username.slice(0, 2).toUpperCase()}
                                    </AvatarFallback>
                                  </Avatar>
                                  <div className="flex-1 min-w-0">
                                    <div className="flex items-center gap-2 mb-1">
                                      <h3 className="font-semibold text-lg text-gray-900 dark:text-white truncate">
                                        {entry.username}
                                      </h3>
                                      <LukuBadge lukuPoints={entry.lukuPoints} />
                                      {entry.currentStreak > 0 && (
                                        <div className="flex items-center text-orange-600 bg-orange-100 dark:bg-orange-900/30 px-2 py-1 rounded-full">
                                          <Flame className="h-3 w-3 mr-1" />
                                          <span className="text-xs font-semibold">{entry.currentStreak}</span>
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              </div>

                              {/* Stats Grid */}
                              <div className="grid grid-cols-3 gap-4 text-center">
                                <div className="bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/30 rounded-xl p-3">
                                  <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                                    {entry.submissions}
                                  </div>
                                  <div className="text-xs text-blue-700 dark:text-blue-300 font-medium">
                                    Submissions
                                  </div>
                                </div>
                                <div className="bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/30 dark:to-green-800/30 rounded-xl p-3">
                                  <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                                    {entry.averageRating?.toFixed(1) || '--'}
                                  </div>
                                  <div className="text-xs text-green-700 dark:text-green-300 font-medium">
                                    Avg Rating
                                  </div>
                                </div>
                                <div className="bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/30 dark:to-purple-800/30 rounded-xl p-3">
                                  <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">
                                    {entry.bestRating?.toFixed(1) || '--'}
                                  </div>
                                  <div className="text-xs text-purple-700 dark:text-purple-300 font-medium">
                                    Best Score
                                  </div>
                                </div>
                              </div>

                              {/* Weekly Points */}
                              <div className="flex-shrink-0 text-right">
                                <div className="flex items-center gap-1 mb-1">
                                  <span className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
                                    {entry.weeklyPoints?.toFixed(0) || '0'}
                                  </span>
                                  <Trophy className="h-6 w-6 text-purple-500" />
                                </div>
                                <p className="text-sm text-gray-500 dark:text-gray-400">Weekly Points</p>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <Alert className="border-0 bg-gradient-to-r from-gray-50/80 to-slate-50/80 dark:from-gray-900/20 dark:to-slate-900/20 backdrop-blur rounded-xl shadow-lg">
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-full bg-gray-500/20">
                      <Info className="h-5 w-5 text-gray-600 dark:text-gray-400" />
                    </div>
                    <div className="flex-1">
                      <AlertTitle className="font-semibold text-gray-900 dark:text-gray-100">No Weekly Data</AlertTitle>
                      <AlertDescription className="text-gray-700 dark:text-gray-300">
                        No weekly performance data available yet. Check back later!
                      </AlertDescription>
                    </div>
                  </div>
                </Alert>
              )}
            </CardContent>
          </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Coming Soon Banner */}
      <div className="mt-12">
        <Alert className="border-0 bg-gradient-to-r from-blue-50/80 to-purple-50/80 dark:from-blue-900/20 dark:to-purple-900/20 backdrop-blur rounded-2xl shadow-xl">
          <div className="flex items-center gap-4 p-2">
            <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg">
              <Star className="h-6 w-6" />
            </div>
            <div className="flex-1">
              <AlertTitle className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent">
                More Features Coming Soon!
              </AlertTitle>
              <AlertDescription className="text-lg text-gray-600 dark:text-gray-400 mt-2">
                We're working on exciting new features including private leaderboards, style battles, and custom challenges to make your fashion journey even more engaging!
              </AlertDescription>
            </div>
          </div>
        </Alert>
      </div>

      {/* Enhanced Outfit Details Modal */}
      {selectedEntry && (
        <DialogContent className="sm:max-w-2xl p-0 rounded-2xl overflow-hidden shadow-2xl bg-white/95 dark:bg-gray-800/95 backdrop-blur-xl border-0">
          <div className="relative">
            <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-purple-600/10 blur-xl"></div>
            <DialogHeader className="relative p-6 pb-4 bg-gradient-to-r from-blue-50/50 to-purple-50/50 dark:from-blue-900/20 dark:to-purple-900/20">
              <div className="flex items-center gap-4 mb-3">
                <Avatar className="h-16 w-16 border-3 border-white dark:border-gray-700 shadow-xl">
                  <AvatarImage src={selectedEntry.userPhotoURL || undefined} alt={selectedEntry.username || 'User'} />
                  <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-600 text-white font-bold text-xl">
                    {(selectedEntry.username || 'U').charAt(0).toUpperCase()}
                  </AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <DialogTitle className="text-2xl font-bold text-gray-900 dark:text-white flex items-center gap-3">
                    {selectedEntry.username || 'Anonymous User'}
                    <LukuBadge lukuPoints={selectedEntry.lukuPoints} />
                  </DialogTitle>
                  <DialogDescription className="text-gray-600 dark:text-gray-400 mt-1 flex items-center gap-2">
                    <div className="h-2 w-2 bg-green-500 rounded-full animate-pulse"></div>
                    Style analysis for {formatDate(currentLeaderboardDate)}
                  </DialogDescription>
                </div>
                <DialogClose asChild>
                  <Button variant="ghost" size="icon" className="rounded-full h-10 w-10 hover:bg-gray-100/80 dark:hover:bg-gray-700/80">
                    <XCircle className="h-5 w-5" />
                  </Button>
                </DialogClose>
              </div>
              
              {/* Social Links */}
              <div className="flex items-center gap-2">
                {selectedEntry.tiktokUrl && (
                  <Link href={selectedEntry.tiktokUrl} target="_blank" rel="noopener noreferrer">
                    <Button variant="outline" size="sm" className="bg-white/50 dark:bg-gray-700/50 backdrop-blur hover:bg-gray-50/80">
                      <LinkIcon className="h-4 w-4 mr-2" />
                      TikTok
                    </Button>
                  </Link>
                )}
                {selectedEntry.instagramUrl && (
                  <Link href={selectedEntry.instagramUrl} target="_blank" rel="noopener noreferrer">
                    <Button variant="outline" size="sm" className="bg-white/50 dark:bg-gray-700/50 backdrop-blur hover:bg-pink-50/80">
                      <Instagram className="h-4 w-4 mr-2" />
                      Instagram
                    </Button>
                  </Link>
                )}
              </div>
            </DialogHeader>
            
            <div className="p-6 space-y-6 max-h-[70vh] overflow-y-auto">
              {/* Outfit Image */}
              <div className="relative rounded-2xl overflow-hidden shadow-2xl bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900">
                <Image
                  src={selectedEntry.outfitImageURL}
                  alt={`Outfit by ${selectedEntry.username}`}
                  width={600}
                  height={600}
                  className="object-contain w-full h-auto max-h-[400px] rounded-2xl"
                />
              </div>

              {/* Rating Display */}
              <div className="text-center py-6 bg-gradient-to-r from-blue-50/50 to-purple-50/50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-2xl backdrop-blur">
                <div className="flex items-center justify-center gap-3 mb-4">
                  <span className="text-6xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                    {selectedEntry.rating?.toFixed(1) || '--'}
                  </span>
                  <div className="text-2xl text-gray-500 dark:text-gray-400">/10</div>
                </div>
                <div className="flex justify-center gap-1">
                  {[...Array(10)].map((_, i) => (
                    <Star 
                      key={i} 
                      className={cn(
                        "h-6 w-6 transition-colors",
                        i < Math.round(selectedEntry.rating) 
                          ? 'text-yellow-500 fill-yellow-500' 
                          : 'text-gray-300 dark:text-gray-600'
                      )} 
                    />
                  ))}
                </div>
                <p className="text-lg font-semibold text-gray-700 dark:text-gray-300 mt-2">Style Score</p>
              </div>

              {/* AI Feedback Sections */}
              <div className="space-y-4">
                {/* Stylist's Verdict */}
                <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur rounded-2xl p-6 shadow-lg border border-gray-200/50 dark:border-gray-700/50">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 text-white">
                      <MessageSquareQuote className="h-5 w-5" />
                    </div>
                    <h3 className="text-xl font-bold text-gray-900 dark:text-white">Stylist's Verdict</h3>
                  </div>
                  <p className="text-gray-700 dark:text-gray-300 leading-relaxed italic bg-gradient-to-r from-blue-50/50 to-purple-50/50 dark:from-blue-900/20 dark:to-purple-900/20 p-4 rounded-xl">
                    "{selectedEntry.complimentOrCritique || "No detailed feedback provided."}"
                  </p>
                </div>

                {/* Color Suggestions */}
                {selectedEntry.colorSuggestions && selectedEntry.colorSuggestions.length > 0 && (
                  <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur rounded-2xl p-6 shadow-lg border border-gray-200/50 dark:border-gray-700/50">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="p-2 rounded-full bg-gradient-to-r from-pink-500 to-rose-600 text-white">
                        <Palette className="h-5 w-5" />
                      </div>
                      <h3 className="text-xl font-bold text-gray-900 dark:text-white">Color Palette Suggestions</h3>
                    </div>
                    <div className="grid gap-3">
                      {selectedEntry.colorSuggestions.map((color, index) => (
                        <div key={index} className="flex items-center gap-3 p-3 bg-gradient-to-r from-pink-50/50 to-rose-50/50 dark:from-pink-900/20 dark:to-rose-900/20 rounded-xl">
                          <div className="w-3 h-3 rounded-full bg-gradient-to-r from-pink-400 to-rose-500"></div>
                          <span className="text-gray-700 dark:text-gray-300">{color}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Look Suggestions */}
                {selectedEntry.lookSuggestions && (
                  <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur rounded-2xl p-6 shadow-lg border border-gray-200/50 dark:border-gray-700/50">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-600 text-white">
                        <Shirt className="h-5 w-5" />
                      </div>
                      <h3 className="text-xl font-bold text-gray-900 dark:text-white">Style Recommendations</h3>
                    </div>
                    <p className="text-gray-700 dark:text-gray-300 leading-relaxed bg-gradient-to-r from-green-50/50 to-emerald-50/50 dark:from-green-900/20 dark:to-emerald-900/20 p-4 rounded-xl">
                      {selectedEntry.lookSuggestions}
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Modal Footer */}
            <div className="p-6 pt-0">
              <DialogClose asChild>
                <Button className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-semibold py-3 rounded-xl shadow-lg hover:shadow-xl transition-all">
                  Close Analysis
                </Button>
              </DialogClose>
            </div>
          </div>
        </DialogContent>
      )}
    </div>
        </Dialog>
      </div>
    </div>
  );
}

function LeaderboardPageWrapper() {
    return (
        <Dialog>
            <LeaderboardPage />
        </Dialog>
    )
}

export default LeaderboardPageWrapper;
